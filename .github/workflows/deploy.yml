name: Deploy Eduapp

on:
  push:
    branches:
      - main
      - develop  # Add develop branch for staging
  pull_request:
    branches:
      - main
      - develop

jobs:
  test:  # Add testing job
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4  # Update to latest version
      - name: Set up Python
        uses: actions/setup-python@v4
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests
        run: |
          python manage.py test

  lint:  # Add linting job
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Run linters
        run: |
          pip install flake8
          flake8 .

  deploy:
    needs: [test, lint]  # Add dependencies
    runs-on: ubuntu-latest
    environment: production  # Add environment
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure SSH
        uses: webfactory/ssh-agent@v0.8.0  # Use established action
        with:
          ssh-private-key: ${{ secrets.EC2_PRIVATE_KEY }}
      
      - name: Add host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
      
      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          # Compress and transfer build files
          tar -czf build.tar.gz build/
          scp -o ConnectTimeout=10 build.tar.gz $EC2_USER@$EC2_HOST:/tmp/
          
          # Execute deployment with timeout
          ssh -o ConnectTimeout=10 $EC2_USER@$EC2_HOST "bash -s" < ./scripts/deploy-react.sh &

          # Wait for deployment with timeout (5 minutes max)
          timeout 300 bash -c 'while ! curl -s -f http://$EC2_HOST/health; do sleep 5; done' || exit 1
