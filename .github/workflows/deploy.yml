name: Deploy to EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm install
        npm install -g pm2

    - name: Setup SSH
      run: |
        # Create SSH directory
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # Write the private key
        printf "%s" "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # Add host to known hosts
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts 2>/dev/null
        
    - name: Deploy to EC2
      env:
        HOST: ${{ secrets.EC2_HOST }}
        USER: ${{ secrets.EC2_USER }}
      run: |
        # Setup NVM and Node.js on remote server
        ssh -o StrictHostKeyChecking=no ${USER}@${HOST} '
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" || {
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          }
          
          # Install Node.js if not present
          if ! command -v node &> /dev/null; then
            nvm install 18
            nvm use 18
          fi
          
          # Install PM2 globally if not present
          if ! command -v pm2 &> /dev/null; then
            npm install -g pm2
          fi
          
          # Setup application directory
          REPO_DIR="$HOME/app"
          if [ -d "$REPO_DIR/.git" ]; then
            cd "$REPO_DIR"
            git fetch origin
            git reset --hard origin/main
          else
            git clone https://github.com/mathsenseacademy/eduapp.git "$REPO_DIR"
            cd "$REPO_DIR"
          fi
          
          # Install dependencies and build
          npm install
          npm run build
          
          # Start or restart the application
          if pm2 list | grep -q "eduapp"; then
            pm2 restart eduapp --update-env
          else
            pm2 start npm --name "eduapp" -- start
          fi
          
          # Save PM2 process list
          pm2 save
        '
        
    - name: Cleanup
      if: always()
      run: |
        rm -f ~/.ssh/id_rsa
        rm -f ~/.ssh/known_hosts
